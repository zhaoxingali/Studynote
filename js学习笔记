***
-函数、弱类型、动态对象
-lambda 演算是一用于研究函数定义、函数应用、递归的形式系统
-Scheme多范型编程语言
-JSLint javascript 解析器：分析js问题和报告包含错误
-method方法去定义新方法
--js注释/* */尽量避免使用，避免正则出错，推荐//
--js 不允许使用保留字来命名变量和参数
--js 只有单一的数字类型，内部表示为64位的浮点数
--如果一个数字的字面量有指数部分，那这个字面量的值是有e之前的部分x10，再以e后边的次方来计算（100和1e2是相同的数字）
--值NaN 是一个数值，他表示不能产生正常结果的运算结果，isNaN(number);返回值：true or false
--infinity 用于存放正无穷大的数据
--Math.floor(number) 讲一个数字转换为整数
-js中没有字符类型，所有字符都是16位，Unicode是一个16位的字符集
--js中一个字符一旦创建就不会被改变，通过运算符得到新的字符
--
--js语句往往按照从上到下的顺序执行
--代码块：包含在一对花括号的一组语句，代码块不会创建新的作用域，因此变量应该被定义在函数的顶端
--do 语句和 while语句的区别是do先执行代码块再检测表达式的值
--try catch语句 try执行代码块，并捕获该代码抛出的异常，catch从句中定义了一个新的变量，接收异常对象
--运算符的优先级
--typeof 运算符产生的值有：'string'、'number'、'boolean'、'underfined'、'function'、'object',
---！运算符的值为真,返回false,否则返回true
---+加法和拼接
---/产生非整数
---&&运算，如果第一个运算数的值为假，那么产生的是第一个运算数的值，否则产生第二个运算数的值
---||运算，如果第一个数的值为true，则产生第一个数的值，否则返回第二个数的值
--
--字面量：指定新对象
---
###对象
--js 的简类型数字、字符串、boolean、null、undefined五种数据类型，其他都是对象，js对象采用键控集合
--js对象包括原型继承特性，允许对象继承另一个对象的属性，
--对象是可嵌套的
--获取对象中包含的值：对象['属性名'] 或 对象.属性名
--对象中的值通过赋值语句来更新，如果赋值语句已经存在对象中，那么这个属性的值被替换
--js委托 不断在原型对象中寻找属性的过程;
--js反射 检查对象属性typeof	确定属性类型 对象.hasOwnProperty('属性');对象特有的属性返回值为true ,hasOwnProperty 不会检查原型链
--js枚举 for in 语句可以遍历一个对象中所有的属性名;包括函数和原型链中的属性，属性名出现的 顺序不是固定的，确保属性以特定的顺序出现尽量避免使用for in
--js删除 delete删除对象属性，但是不会删除原型链中的任何对象
--js减少全局变量的污染：全局变量消弱程序的灵活性，应该避免；最小化使用全局变量的一个方法是在应用当中只创建唯一一个全局变量，使得该变量成为承载其他变量的容器

###函数
--函数对象：'名/值'对集合
---字面量产生的对象：Object.prototype
---函数产生的对象：Function.prototype
---js函数字面量
----| 1.保留字 function
----| 2.函数名 可省、可递归调用;函数没命名，称作匿名函数;
----| 3.参数
----| 4.函数体
----| 5.闭包 函数字面量创建的函数对象包含一个链接到外部上下文的链接

---js函数调用：调用一个函数传递控制权和参数给新的函数；
----|js四种调用模式：方法调用模式、函数调用模式、构造器调用模式、apply调用模式
----|js方法 一个函数被保存为对象的一个属性，称为方法；this绑定到该对象;this能从对象中取值和修改
----|js函数调用 当一个函数并非一个对象的属性时，那么他被当做一个函数来调用,此时this被绑定到全局对象;
----|js构造器调用模式 原型继承方式
----|js apply调用模式 apply(arg1,arg2)方法构建一个参数数组并用其去调用函数,arg1绑定this的值;arg2参数数组
---js参数
----|当函数调用时会得到一个免费传递的参数数组,arguments并不是一个真正的数组,它是一个类似于数组的对象
---js返回
----|函数的执行总是从调用开始到}结束, return语句 提前返回，当return被执行时，函数不在执行余下的语句，每个函数都会返回一个值，为指定则返回underfined
---js异常处理
----|js异常处理机制: 异常：干扰程序的正常运行的非正常事故，检查这样事故，你的程序应该抛出异常throw,
	throw中断执行，抛出一个exception对象，该对象会被传递到try catch语句,
---js给类型增值的方法：
----|js object.ptototype 给每个对象添加函数、数组、字符串数字正则表达式布尔值
---js递归
----|递归函数是直接或者间接调用自身的一种函数
---js作用域
----|作用域控制变量和参数的可见性及生命周期;js函数作用域：js参数和变量在外部不可见,在函数的任何地方可见,js中函数尽早声明在头部;
---js闭包
----|调用函数体内的变量,内部函数;占用内存空间，保存作用域
---js模块
----|利用函数和闭包构造模块,js 模块利用函数作用域和闭包来创建绑定对象与私有成员的关联
----|利用模块可以摒弃全局变量的使用
---js级联
---js套用
---js记忆：函数可以用对象去记住先前操作的结果，从而能避免无谓的运算，这种优化叫记忆;
---js继承
----|js伪类
----|

